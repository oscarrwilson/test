import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class RegisterGUI extends JFrame {

    // Creates new form RegisterGUI
    public RegisterGUI() {
        initComponents(); // Initializes all GUI components
        setResizable(false); // Can not be resized
        setSize(720, 410); // Size of window
        setLocationRelativeTo(null); // Center the window on the screen
    }

    // Boolean to determine if password is currently shown or hidden
    private boolean isPasswordShown = false;

    // RegisterController contains all business logic for this GUI...
    private RegistrationFormHandler registrationFormHandler;

    // GUI components declaration
    private javax.swing.JLabel lblLogin;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtConfirmPassword;
    private javax.swing.JLabel imgShowPassword;
    private javax.swing.JLabel imgShowConfirmPassword;

    // Default focus adapter that sets and removes placeholder text
    private final FocusAdapter defaultFocusAdapter = new FocusAdapter() {
        public void focusGained(FocusEvent evt) {
            JTextField field = (JTextField) evt.getSource();
            field.setText(field.getText().equals(field.getName()) ? "" : field.getText());
        }

        public void focusLost(FocusEvent evt) {
            JTextField field = (JTextField) evt.getSource();
            field.setText(field.getText().isEmpty() ? field.getName() : field.getText());
        }
    };

    // Creates a default text component with a placeholder text and focus adapter
    private JComponent createDefaultComponent(String defaultText, FocusAdapter focusAdapter, boolean isPasswordField) {
        JComponent component = isPasswordField ? new JPasswordField(defaultText) : new JTextField(defaultText);
        if (isPasswordField) ((JPasswordField) component).setEchoChar((char) 0);

        component.setName(defaultText);
        component.setFont(new Font("Tahoma", Font.PLAIN, 13));
        component.setForeground(Color.GRAY);
        component.setBorder(BorderFactory.createEmptyBorder());
        component.addFocusListener(focusAdapter);
        return component;
    }

    // Initializes all GUI components
    private void initComponents() {

        JLabel lblTitle = new JLabel();
        lblLogin = new JLabel();
        JPanel pnlBg = new JPanel();
        JPanel registerPanel = new JPanel();
        JPanel jPanel1 = new JPanel();

        // Creates all text components with default values and focus adapters
        txtFirstName = (JTextField) createDefaultComponent("First Name", defaultFocusAdapter, false);
        txtLastName = (JTextField) createDefaultComponent("Last Name", defaultFocusAdapter, false);
        txtUserName = (JTextField) createDefaultComponent("Username", defaultFocusAdapter, false);
        txtEmail = (JTextField) createDefaultComponent("Email Address", defaultFocusAdapter, false);
        txtPassword = (JPasswordField) createDefaultComponent("Enter your password", defaultFocusAdapter, true);
        txtConfirmPassword = (JPasswordField) createDefaultComponent("Re-enter your password", defaultFocusAdapter, true);
        imgShowPassword = new JLabel();
        imgShowConfirmPassword = new JLabel();

        JSeparator sepFirstName = new JSeparator();
        JSeparator sepLastName = new JSeparator();
        JSeparator sepUserName = new JSeparator();
        JSeparator sepEmail = new JSeparator();
        JSeparator sepShowPassword = new JSeparator();
        JSeparator sepShowConfirmPassword = new JSeparator();
        JButton btnRegister = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new Font("Tahoma", 0, 24)); // NOI18N
        lblTitle.setForeground(Color.GRAY);
        lblTitle.setText("Create new Account");

        lblLogin.setText("Already have an account?");

        pnlBg.setBackground(Color.WHITE);

        registerPanel.setBackground(Color.WHITE);

        jPanel1.setBackground(Color.WHITE);
        jPanel1.setLayout(new CardLayout());

        // Sets the icon and mouse listener for the show password button
        imgShowPassword.setIcon(new ImageIcon(getClass().getResource("img_showPwd.png")));
        imgShowPassword.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                imgShowPasswordMousePressed(evt);
            }
        });

        // Sets the icon and mouse listener for the show confirm password button
        imgShowConfirmPassword.setIcon(new ImageIcon(getClass().getResource("img_showPwd.png")));
        imgShowConfirmPassword.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                imgShowConfirmPasswordMousePressed(evt);
            }
        });

        // Sets background and foreground colors for all separators and register button
        JSeparator[] separators = {sepFirstName, sepLastName, sepUserName, sepEmail, sepShowPassword};

        Color backgroundColor = new Color(255, 255, 255);
        Color foregroundColor = new Color(0, 153, 153);

        for (JSeparator separator : separators) {
            separator.setBackground(backgroundColor);
            separator.setForeground(foregroundColor);
        }

        btnRegister.setBackground(new Color(0, 153, 153));
        btnRegister.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        btnRegister.setForeground(new Color(255, 255, 255));
        btnRegister.setText("Register");
        btnRegister.setBorder(null);

        // Layout manager and components placement
        GroupLayout RegisterLayout = new GroupLayout(registerPanel);
        registerPanel.setLayout(RegisterLayout);
        RegisterLayout.setHorizontalGroup(
                RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(RegisterLayout.createSequentialGroup()
                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                .addGap(48, 48, 48)
                                                .addComponent(lblLogin))
                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(lblTitle, GroupLayout.PREFERRED_SIZE, 214, GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                                .addGap(16, 16, 16)
                                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                                                .addGap(6, 6, 6)
                                                                                .addComponent(txtPassword, GroupLayout.PREFERRED_SIZE, 197, GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(imgShowPassword))
                                                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                                                                .addGap(8, 8, 8)
                                                                                                .addComponent(txtUserName, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE))
                                                                                        .addComponent(sepUserName, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(txtFirstName, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(sepFirstName, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(sepShowPassword, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE))
                                                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                                                                .addGap(157, 157, 157)
                                                                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                                        .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                                                .addGroup(GroupLayout.Alignment.TRAILING, RegisterLayout.createSequentialGroup()
                                                                                                                        .addComponent(sepLastName, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                                                                                                        .addGap(8, 8, 8))
                                                                                                                .addComponent(txtLastName, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE))
                                                                                                        .addComponent(sepEmail, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                                                                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                                                                                .addGap(6, 6, 6)
                                                                                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                                                        .addComponent(txtConfirmPassword, GroupLayout.PREFERRED_SIZE, 197, GroupLayout.PREFERRED_SIZE)
                                                                                                                        .addComponent(txtEmail, GroupLayout.PREFERRED_SIZE, 225, GroupLayout.PREFERRED_SIZE)))
                                                                                                        .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                                                                                .addComponent(btnRegister, GroupLayout.PREFERRED_SIZE, 103, GroupLayout.PREFERRED_SIZE)
                                                                                                                .addComponent(sepShowConfirmPassword, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE))))
                                                                                        .addGroup(GroupLayout.Alignment.TRAILING, RegisterLayout.createSequentialGroup()
                                                                                                .addGap(84, 84, 84)
                                                                                                .addComponent(imgShowConfirmPassword)
                                                                                                .addGap(3, 3, 3)))))))))
                                .addGap(0, 72, Short.MAX_VALUE))
        );
        RegisterLayout.setVerticalGroup(
                RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(RegisterLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(lblTitle, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(txtFirstName, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sepFirstName, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtUserName, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sepUserName, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtPassword)
                                                        .addComponent(imgShowPassword, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sepShowPassword, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE))
                                        .addGroup(RegisterLayout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(txtLastName, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sepLastName, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
                                                .addGap(12, 12, 12)
                                                .addComponent(txtEmail, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sepEmail, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
                                                .addGap(3, 3, 3)
                                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtConfirmPassword, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(imgShowConfirmPassword, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sepShowConfirmPassword, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)))
                                .addGap(24, 24, 24)
                                .addGroup(RegisterLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblLogin)
                                        .addComponent(btnRegister, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(106, Short.MAX_VALUE))
        );

        jPanel1.add(registerPanel, "card2");


        GroupLayout pnl_bgLayout = new GroupLayout(pnlBg);
        pnlBg.setLayout(pnl_bgLayout);
        pnl_bgLayout.setHorizontalGroup(
                pnl_bgLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnl_bgLayout.setVerticalGroup(
                pnl_bgLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(pnlBg, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(pnlBg, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();

        // Define a mouse listener for lblLogin label
        lblLogin.addMouseListener(new MouseAdapter() {

            // Define behavior when the mouse enters lblLogin
            public void mouseEntered(MouseEvent e) {
                // Change lblLogin's color to blue
                lblLogin.setForeground(Color.BLUE);
                // Change the cursor to a hand cursor
                lblLogin.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            // Define behavior when the mouse exits lblLogin
            public void mouseExited(MouseEvent e) {
                // Change lblLogin's color to black
                lblLogin.setForeground(Color.BLACK);
                // Change the cursor back to the default cursor
                lblLogin.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            // Define behavior when lblLogin is clicked
            public void mouseClicked(MouseEvent e) {
                // Create a new LoginGUI window
                LoginGUI loginGUI = new LoginGUI();
                // Set the new window to be visible
                loginGUI.setVisible(true);
                // Close the current window (RegisterGUI)
                dispose();
            }
        });

        // Create a new RegisterController object
        registrationFormHandler = new RegistrationFormHandler();

// Add an action listener to the btnRegister button using a lambda expression
        btnRegister.addActionListener(e -> {
            // Retrieve input values from the text fields and password fields
            String fNS = txtFirstName.getText();
            String lNS = txtLastName.getText();
            String uS = txtUserName.getText();
            String eS = txtEmail.getText();
            char[] password = txtPassword.getPassword();
            String pS = new String(password);

            char[] confirmPassword = txtConfirmPassword.getPassword();
            String rPS = new String(confirmPassword);

            // Validate the input using the registrationFormHandler object
            if (registrationFormHandler.validateFields(fNS, lNS, uS, eS, pS, rPS) == true) {
                // Create a new SuccessGUI window if input is valid
                SuccessGUI successGUI = new SuccessGUI();
                // Set the new window to be visible
                successGUI.setVisible(true);
                // Close the current window (RegisterGUI)
                dispose();
            }
            // Clear the password fields
            txtPassword.setText("");
            txtConfirmPassword.setText("");
        });
    }

    // Methoods below handle focus events of text fields to show default text when empty, and remove it when field gains focus.
// Restore default text when field loses focus and no input entered.
    private void txtFirstNameFocusGained(FocusEvent evt) {
        txtFirstName.setText(txtFirstName.getText().equals("First Name") ? "" : txtFirstName.getText());
    }

    private void txtFirstNameFocusLost(FocusEvent evt) {
        txtFirstName.setText(txtFirstName.getText().isEmpty() ? "First Name" : txtFirstName.getText());
    }

    private void txtLastNameFocusGained(java.awt.event.FocusEvent evt) {
        txtLastName.setText(txtLastName.getText().equals("Last Name") ? "" : txtLastName.getText());
    }

    private void txtLastNameFocusLost(java.awt.event.FocusEvent evt) {
        txtLastName.setText(txtLastName.getText().isEmpty() ? "Last Name" : txtLastName.getText());
    }

    private void txtUsernameFocusGained(FocusEvent evt) {
        txtUserName.setText(txtUserName.getText().equals("Username") ? "" : txtUserName.getText());
    }

    private void txtUsernameFocusLost(FocusEvent evt) {
        txtUserName.setText(txtUserName.getText().isEmpty() ? "Username" : txtUserName.getText());
    }

    private void txtEmailFocusGained(java.awt.event.FocusEvent evt) {
        txtEmail.setText(txtEmail.getText().equals("Email Address") ? "" : txtEmail.getText());
    }

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {
        txtEmail.setText(txtEmail.getText().isEmpty() ? "Email Address" : txtEmail.getText());
    }

    // Handle focus events on password fields, clearing default text and hiding/showing the password as needed.
    private void handlePasswordFieldFocus(JPasswordField field) {
        if (field.getText().equals("Enter your password") || field.getText().equals("Re-enter your password")) {
            field.setText("");
            if (!isPasswordShown) field.setEchoChar('*');
        }
    }

    // Handle blur events on password fields, restoring default text and hiding the password.
    private void handlePasswordFieldBlur(JPasswordField field) {
        if (field.getPassword().length == 0) {
            field.setText("Enter your password");
            field.setEchoChar((char) 0);
        }
        field.selectAll();
    }

    // Show or hide the password in a password field and change the icon.
    private void togglePasswordField(JPasswordField field, JLabel icon) {
        if (isPasswordShown) {
            if (!field.getText().equals(field.getName())) {
                field.setEchoChar((char) 0);
            }
            icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("img_uname.png")));
        } else {
            if (!field.getText().equals(field.getName())) {
                field.setEchoChar('*');
            }
            icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("img_showPwd.png")));
        }
    }

    // Handle focus events on the password field by calling the handlePasswordFieldFocus method.
    private void txtPasswordFocusGained(java.awt.event.FocusEvent evt) {
        handlePasswordFieldFocus(txtPassword);
    }

    // Handle blur events on the password field by calling the handlePasswordFieldBlur method.
    private void txtPasswordFocusLost(java.awt.event.FocusEvent evt) {
        handlePasswordFieldBlur(txtPassword);
    }

    // Handle focus events on the confirm password field by calling the handlePasswordFieldFocus method.
    private void txtConfirmPasswordFocusGained(java.awt.event.FocusEvent evt) {
        handlePasswordFieldFocus(txtConfirmPassword);
    }

    // Handle blur events on the confirm password field by calling the handlePasswordFieldBlur method.
    private void txtConfirmPasswordFocusLost(java.awt.event.FocusEvent evt) {
        handlePasswordFieldBlur(txtConfirmPassword);
    }

    // Toggle the visibility of the password in the password field when the "show password" icon is clicked.
    private void imgShowPasswordMousePressed(java.awt.event.MouseEvent evt) {
        isPasswordShown = !isPasswordShown;
        togglePasswordField(txtPassword, imgShowPassword);
    }

    // Toggle the visibility of the password in the confirm password field when the "show password" icon is clicked.
    private void imgShowConfirmPasswordMousePressed(java.awt.event.MouseEvent evt) {
        isPasswordShown = !isPasswordShown;
        togglePasswordField(txtConfirmPassword, imgShowConfirmPassword);
    }
}
