import javax.swing.*;
import java.awt.*;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

// This class represents the GUI for resetting a user's password
public class ResetPasswordGUI extends javax.swing.JFrame {

    // Constructor that takes an identifier (e.g. username or email) to identify the user whose password needs to be reset
    public ResetPasswordGUI(String identifier) {
        initComponents(); // Initializes all GUI components
        setResizable(false); // Can not be resized
        setSize(720, 410); // Size of window
        setLocationRelativeTo(null); // Center the window on the screen
        this.identifier = identifier; // Set the identifier for the user
    }

    // GUI components
    private javax.swing.JPanel ForgotPass;
    private javax.swing.JButton btnContinue;
    private javax.swing.JLabel imgShowPassword;
    private javax.swing.JLabel imgShowConfirmPassword;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTitleText;
    private javax.swing.JPanel pnl_bg;
    private javax.swing.JSeparator sept_Identifier;
    private javax.swing.JSeparator sept_Identifier1;
    private javax.swing.JLabel txtBackToLogin;
    private javax.swing.JLabel txtBlock1;
    private javax.swing.JLabel txtBlock2;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtConfirmPassword;
    private String identifier; // The identifier for the user whose password needs to be reset

    // Booleans to determine if password is currently shown or hidden
    private boolean isPasswordShown = false;
    private boolean isConfirmPasswordShown = false;

    // Method to initialize all GUI components
    private void initComponents() {
        pnl_bg = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        ForgotPass = new javax.swing.JPanel();
        btnContinue = new javax.swing.JButton();
        lblTitleText = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        sept_Identifier = new javax.swing.JSeparator();
        txtBlock1 = new javax.swing.JLabel();
        txtBlock2 = new javax.swing.JLabel();
        txtConfirmPassword = new javax.swing.JPasswordField();
        sept_Identifier1 = new javax.swing.JSeparator();
        txtBackToLogin = new javax.swing.JLabel();
        imgShowPassword = new JLabel();
        imgShowConfirmPassword = new JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnl_bg.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.CardLayout());

        ForgotPass.setBackground(new java.awt.Color(255, 255, 255));

        // Button to continue resetting the password
        btnContinue.setBackground(new java.awt.Color(0, 153, 153));
        btnContinue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnContinue.setForeground(new java.awt.Color(255, 255, 255));
        btnContinue.setText("Finish");
        btnContinue.setBorder(null);
        btnContinue.setLocation((ForgotPass.getWidth() - btnContinue.getWidth()) / 2, 0); // 0 is just the Y location
        btnContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnContinueActionPerformed(evt);
            }
        });

        // Set the font, color, and text for the title label
        lblTitleText.setFont(new java.awt.Font("Tahoma", 0, 24));
        lblTitleText.setForeground(new java.awt.Color(102, 102, 102));
        lblTitleText.setText("Create New Password");

// Set the font, color, text, and border for the password field
        txtPassword.setFont(new java.awt.Font("Tahoma", 0, 13));
        txtPassword.setForeground(new java.awt.Color(102, 102, 102));
        txtPassword.setText("New Password");
        txtPassword.setBorder(null);
        txtPassword.setEchoChar((char) 0);

// Add focus listeners to the password field to show or hide the password text and set the echo character accordingly
        txtPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPasswordFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPasswordFocusLost(evt);
            }
        });

// Set the color, alignment, and background of the first separator
        sept_Identifier.setBackground(new java.awt.Color(255, 255, 255));
        sept_Identifier.setForeground(new java.awt.Color(0, 153, 153));
        sept_Identifier.setAlignmentX(sept_Identifier.CENTER_ALIGNMENT);

// Set the font, text, and alignment of the first block of text
        txtBlock1.setFont(new java.awt.Font("Tahoma", 0, 13));
        txtBlock1.setText("Your New Password Must Be");
        txtBlock1.setHorizontalAlignment(txtBlock1.CENTER);

// Set the font, text, and alignment of the second block of text
        txtBlock2.setFont(new java.awt.Font("Tahoma", 0, 13));
        txtBlock2.setText("Different From Your Previous Password");
        txtBlock2.setHorizontalAlignment(txtBlock2.CENTER);

// Set the font, color, text, and border for the confirm password field
        txtConfirmPassword.setFont(new java.awt.Font("Tahoma", 0, 13));
        txtConfirmPassword.setForeground(new java.awt.Color(102, 102, 102));
        txtConfirmPassword.setText("Confirm Password");
        txtConfirmPassword.setBorder(null);
        txtConfirmPassword.setEchoChar((char) 0);

// Add focus listeners to the confirm password field to show or hide the password text and set the echo character accordingly
        txtConfirmPassword.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtConfirmPasswordFocusGained(evt);
            }

            public void focusLost(java.awt.event.FocusEvent evt) {
                txtConfirmPasswordFocusLost(evt);
            }
        });

// Set the color, alignment, and background of the second separator
        sept_Identifier1.setBackground(new java.awt.Color(255, 255, 255));
        sept_Identifier1.setForeground(new java.awt.Color(0, 153, 153));
        sept_Identifier1.setAlignmentX(sept_Identifier1.CENTER_ALIGNMENT);

// Set the font and text for the back to login label
        txtBackToLogin.setFont(new java.awt.Font("Tahoma", 0, 13));
        txtBackToLogin.setText("Back To Login");

// Set the icon and mouse listener for the show password button for the password field
        imgShowPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("img_ShowPass.png")));
        imgShowPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imgShowPasswordMousePressed(evt);
            }
        });

// Set the icon and mouse listener for the show password button for the confirm password field
        imgShowConfirmPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("img_ShowPass.png")));
        imgShowConfirmPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imgShowConfirmPasswordMousePressed(evt);
            }
        });

        javax.swing.GroupLayout ForgotPassLayout = new javax.swing.GroupLayout(ForgotPass);
        ForgotPass.setLayout(ForgotPassLayout);

        GroupLayout.Group hGroup = ForgotPassLayout.createSequentialGroup()
                .addGap(45, 45, 45) // Change the value here to move txtBackToLogin independently
                .addComponent(txtBackToLogin)
                .addGap(120, 120, 120) // Add this gap to separate txtBackToLogin and txtBlock components
                .addGroup(ForgotPassLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                        .addComponent(txtBlock1)
                        .addComponent(txtBlock2)
                );

        ForgotPassLayout
                .setHorizontalGroup(ForgotPassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ForgotPassLayout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(lblTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGroup(hGroup)
                        .addGroup(ForgotPassLayout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(ForgotPassLayout.createParallelGroup(GroupLayout.Alignment.CENTER)
                                        .addComponent(btnContinue, GroupLayout.PREFERRED_SIZE, 103, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(ForgotPassLayout.createSequentialGroup()
                                                .addGap(40, 40, 40) // Add this gap to move txtPassword and imgShowPassword to the right
                                                .addComponent(txtPassword, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(imgShowPassword))
                                        .addComponent(sept_Identifier, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(ForgotPassLayout.createSequentialGroup()
                                                .addGap(40, 40, 40) // Add this gap to move txtConfirmPassword and imgShowConfirmPassword to the right
                                                .addComponent(txtConfirmPassword, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(imgShowConfirmPassword))
                                        .addComponent(sept_Identifier1, GroupLayout.PREFERRED_SIZE, 223, GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                );

        lblTitleText.setMaximumSize(new Dimension(300, lblTitleText.getPreferredSize().height));

        ForgotPassLayout.setVerticalGroup(
                ForgotPassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ForgotPassLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(lblTitleText, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(txtBlock1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBlock2)
                                .addGap(18, 18, 18)
                                .addGroup(ForgotPassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(imgShowPassword))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sept_Identifier1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ForgotPassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtConfirmPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(imgShowConfirmPassword))
                                .addGroup(ForgotPassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(ForgotPassLayout.createSequentialGroup()
                                                .addGap(48, 48, 48)
                                                .addGroup(ForgotPassLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(txtBackToLogin)
                                                        .addComponent(btnContinue, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(ForgotPassLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(sept_Identifier, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(120, Short.MAX_VALUE))
        );

        jPanel1.add(ForgotPass, "card2");

        javax.swing.GroupLayout pnl_bgLayout = new javax.swing.GroupLayout(pnl_bg);
        pnl_bg.setLayout(pnl_bgLayout);
        pnl_bgLayout.setHorizontalGroup(
                pnl_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnl_bgLayout.setVerticalGroup(
                pnl_bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnl_bg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(pnl_bg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();

        // Define a mouse listener for lblLogin label
        txtBackToLogin.addMouseListener(new MouseAdapter() {

            // Define behavior when the mouse enters lblLogin
            public void mouseEntered(MouseEvent e) {
                // Change lblLogin's color to blue
                txtBackToLogin.setForeground(Color.BLUE);
                // Change the cursor to a hand cursor
                txtBackToLogin.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            // Define behavior when the mouse exits lblLogin
            public void mouseExited(MouseEvent e) {
                // Change lblLogin's color to black
                txtBackToLogin.setForeground(Color.BLACK);
                // Change the cursor back to the default cursor
                txtBackToLogin.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

            // Define behavior when lblLogin is clicked
            public void mouseClicked(MouseEvent e) {
                // Create a new LoginGUI window
                LoginGUI loginGUI = new LoginGUI();
                // Set the new window to be visible
                loginGUI.setVisible(true);
                // Close the current window (RegisterGUI)
                dispose();
            }
        });

    }

    private void btnContinueActionPerformed(java.awt.event.ActionEvent evt) {
        // Retrieve the user's previous password from the file using the identifier value passed from the previous class
        String previousPassword = FileParser.getPasswordFromFile(identifier);
        System.out.println(identifier);
        System.out.println(txtPassword.getPassword());
        System.out.println(txtConfirmPassword.getPassword());
        // Retrieve the new password and the confirmed password entered by the user
        char[] newPasswordChars = txtPassword.getPassword();
        String newPassword = new String(newPasswordChars);
        char[] newPasswordConfirmedChars = txtConfirmPassword.getPassword();
        String newPasswordConfirmed = new String(newPasswordConfirmedChars);

        // Validate the new password and the confirmed password
        if (!RegistrationFormHandler.isValidPassword(newPassword)) {
            // Display an error message and return
            JOptionPane.showMessageDialog(this, "New password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character.");
            return;
        }

        if (!RegistrationFormHandler.isValidConfirmPassword(newPassword, newPasswordConfirmed)) {
            // Display an error message and return
            JOptionPane.showMessageDialog(this, "The new password and the confirmed password must match.");
            return;
        }
        // Compare the new password to the previous password
        if (newPassword.equals(previousPassword)) {
            // Display an error message and return
            JOptionPane.showMessageDialog(this, "New password must be different from previous password.");
            return;
        }

        // If the new password is different and valid, update the user's password in the file
        if (FileAccess.resetPassword(identifier, newPassword)) {
            // Display a success message and return to the login screen
            JOptionPane.showMessageDialog(this, "Password successfully changed.");
            dispose(); // Close the ResetPasswordGUI window
            LoginGUI loginGUI = new LoginGUI();
            loginGUI.setVisible(true);
        } else {
            // Display an error message if updating the password failed
            JOptionPane.showMessageDialog(this, "Failed to change password. Please try again.");
        }
    }

    // Define behavior when txtPassword gains focus
    private void txtPasswordFocusGained(FocusEvent evt) {
        if (txtPassword.getText().equals("New Password")) {
            txtPassword.setText("");
            if (!isPasswordShown) {
                txtPassword.setEchoChar('*'); // Show password when text is cleared, but only if it was previously hidden
            }
        }
    }

    // Define behavior when txtPassword loses focus
    private void txtPasswordFocusLost(FocusEvent evt) {
        if (txtPassword.getPassword().length == 0) {
            txtPassword.setText("New Password");
            txtPassword.setEchoChar((char) 0); // Hide password when default text is restored
        }
// Select all text to hide password when focus is lost
        txtPassword.selectAll();
    }

    // Define behavior when imgShowPassword is clicked
    private void imgShowPasswordMousePressed(MouseEvent evt) {
        isPasswordShown = !isPasswordShown;
        if (isPasswordShown) {
// If showPwd is clicked, show the user-entered password
            txtPassword.setEchoChar((char) 0);
            imgShowPassword.setIcon(new ImageIcon(getClass().getResource("img_HidePass.png")));
        } else {
// If hidePwd is clicked, obscure the password by default
            if (!txtPassword.getText().equals("New Password")) {
                txtPassword.setEchoChar('*');
            }
            imgShowPassword.setIcon(new ImageIcon(getClass().getResource("img_ShowPass.png")));
        }
    }

    // Define behavior when txtConfirmPassword gains focus
    private void txtConfirmPasswordFocusGained(FocusEvent evt) {
        if (txtConfirmPassword.getText().equals("Confirm Password")) {
            txtConfirmPassword.setText("");
            if (!isConfirmPasswordShown) {
                txtConfirmPassword.setEchoChar('*'); // Show password when text is cleared, but only if it was previously hidden
            }
        }
    }

    // Define behavior when txtConfirmPassword loses focus
    private void txtConfirmPasswordFocusLost(FocusEvent evt) {
        if (txtConfirmPassword.getPassword().length == 0) {
            txtConfirmPassword.setText("Confirm Password");
            txtConfirmPassword.setEchoChar((char) 0); // Hide password when default text is restored
        }
// Select all text to hide password when focus is lost
        txtConfirmPassword.selectAll();
    }

    // Define behavior when imgShowConfirmPassword is clicked
    private void imgShowConfirmPasswordMousePressed(MouseEvent evt) {
        isConfirmPasswordShown = !isConfirmPasswordShown;
        if (isConfirmPasswordShown) {
// If showPwd is clicked, show the user-entered password
            txtConfirmPassword.setEchoChar((char) 0);
            imgShowConfirmPassword.setIcon(new ImageIcon(getClass().getResource("img_HidePass.png")));
        } else {
// If hidePwd is clicked, obscure the password by default
            if (!txtConfirmPassword.getText().equals("Confirm Password")) {
                txtConfirmPassword.setEchoChar('*');
            }
            imgShowConfirmPassword.setIcon(new ImageIcon(getClass().getResource("img_ShowPass.png")));
        }
    }
}
