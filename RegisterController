import javax.swing.*;
import java.util.function.Function;

public class RegistrationFormHandler extends JFrame {

    // Function that takes a message string and shows an error dialog, then returns false
    private Function<String, Boolean> showError = message -> {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    };

    // Validate the input fields and show error messages if any of the validation checks fail
    public boolean validateFields(String firstName, String lastName, String username, String email, String password, String confirmPassword) {

        // Use ternary statements to check the validity of each text field and shows error message if invalid
        boolean isValidFirstName = isValidFirstName(firstName) || showError.apply("Please enter a valid First Name (up to 25 characters long and not 'First Name')") && false;
        boolean isValidLastName = isValidLastName(lastName) || showError.apply("Please enter a valid last name (up to 25 characters long and not 'Last Name')") && false;
        boolean isValidUsername = isValidUsername(username) || showError.apply("Please enter a valid username (up to 25 characters long and not 'Username')") && false;
        boolean isValidEmail = isValidEmail(email) || showError.apply("Please enter a valid email address with '@' & '.'") && false;
        boolean isValidPassword = isValidPassword(password) || showError.apply("Please enter a valid password (at least 8 characters long and containing at least one uppercase letter, one lowercase letter, one number, and one special character)") && false;
        boolean isValidConfirmPassword = isValidConfirmPassword(password, confirmPassword) || showError.apply("Passwords do not match") && false;

        // Return true if all fields are valid, false otherwise
        return isValidFirstName && isValidLastName && isValidEmail && isValidUsername && isValidPassword && isValidConfirmPassword;
    }

    // Check if the first name is valid (up to 25 characters and not equal to "First Name")
    private boolean isValidFirstName(String firstName) {
        return firstName.length() <= 25 && !firstName.equalsIgnoreCase("First Name");
    }

    // Check if the last name is valid (up to 25 characters and not equal to "Last Name")
    private boolean isValidLastName(String lastName) {
        return lastName.length() <= 25 && !lastName.equalsIgnoreCase("Last Name");
    }

    // Check if the email is valid (using a regular expression pattern)
    private boolean isValidEmail(String email) {
        return email.matches("[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}");
    }

    // Check if the username is valid (up to 25 characters and not equal to "Username")
    private boolean isValidUsername(String username) {
        return username.length() <= 25 && !username.equalsIgnoreCase("Username");
    }

    // Check if the password is valid (at least 8 characters, with at least one uppercase letter, one lowercase letter, one number, and one special character)
    private boolean isValidPassword(String password) {
        return password.length() >= 8 && password.matches("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$");
    }

    // Check if the confirmed password matches the original password
    private boolean isValidConfirmPassword(String password, String confirmPassword) {
        return confirmPassword.equals(password);
    }
}
